set visuNo 1
set bufNo [::confVisu::getBufNo $visuNo]
set w ".audace.prtr.usr"

variable SETUP {
   set ::conf(extension,defaut) .fit
   set ::conf(fichier,compres) 0
   foreach file {rz_rgbr_8 rz_rgbr_15 rz_rgbr_30} {
      file copy -force [file join $::conf(testaudela,rep_images) $file.fit] $::audace(rep_images)
   }
   loadima [file join $::audace(rep_images) rz_rgbr_30.fit]
   set coords [list 227 108]
   set attendu [lrange [buf$bufNo getpix $coords] 1 end]
   #--   cherche les dimensions de l'image
   set naxis1 [lindex [buf$bufNo getkwd NAXIS1] 1]
   set naxis2 [lindex [buf$bufNo getkwd NAXIS2] 1]
   #---  efface l'image
   ::confVisu::deleteImage $visuNo
}

variable SETUP2 {
   foreach file {rz_rgbr_8 rz_rgbr_15 rz_rgbr_30} {
      file copy -force [file join $::conf(testaudela,rep_images) $file.fit] $::audace(rep_images)
   }
   ::blt::vector create attendu mesure redValue greenValue blueValue temp -watchunset 1
   loadima [file join $::audace(rep_images) rz_rgbr_30.fit]
}

variable CLEANUP {
   #--   clic sur le bouton Fermer
   ::testaudela::clicButton $w.cmd.fermer
   #---  efface l'image
   ::confVisu::deleteImage $visuNo
   set liste [list rz_rgbr_8 rz_rgbr_15 rz_rgbr_30 ${name_out}1 ${name_out}2 ${name_out}3]
   ttscript2 "IMA/SERIES . \"$liste\" * * .fit . . . . DELETE"
   file delete "./${name_out}1r.jpg" "./${name_out}1g.jpg" "./${name_out}1b.jpg"
   file delete "./${name_out}2r.jpg" "./${name_out}2g.jpg" "./${name_out}2b.jpg"
   file delete "./${name_out}3r.jpg" "./${name_out}3g.jpg" "./${name_out}3b.jpg"
}

variable CLEANUP2 {
   #--   clic sur le bouton Fermer
   ::testaudela::clicButton $w.cmd.fermer
   #---  efface l'image
   ::confVisu::deleteImage $visuNo
   file delete "./${name_out}r.jpg" "./${name_out}g.jpg" "./${name_out}b.jpg"
   ttscript2 "IMA/SERIES . \"$liste\" * * .fit . . . . DELETE"
}

#--Test a batir LOPT

#-----------------------------------------------------------------------------
#--   chaque test INVERT et TRANS a pour entree trois images RGB a traiter
#--   l'option jpegfile est testee systematiquement
#--   le test porte sur :
#        l'existence de 9 fichiers jpeg
#        constance des intensites RGB lors du deplacement du point {227 108}
#-----------------------------------------------------------------------------

#--   test IMA/SERIES INVERT mirror
test imaseries_mirror_x {miroir vertical de rz_rgbr_8 rz_rgbr_15 rz_rgbr_30} -constraints {AUDACE} -setup $SETUP -body {
#--   clic sur le menu "Images/Transformer/Miroir vertical..."
   ::testaudela::clicMenu $visuNo "$::caption(audace,menu,transform)" "$::caption(audace,menu,miroir_x)..."
   #--   selectionne rz_rgbr_8 rz_rgbr_15 rz_rgbr_30
   foreach img {rz_rgbr_8 rz_rgbr_15 rz_rgbr_30} {
      set k [lsearch [$w.choix getcolumns 1] $img]
      ::testaudela::clicCheckButton [$w.choix windowpath $k,0] 1
   }
   #--   selectionne l'option "Options"
   ::testaudela::clicCheckButton $w.ttoptions.che "1"
   #--   selectionne l'option "jpegfile"
   ::testaudela::clicCheckButton $w.ttoptions.jpegfile "1"
   #-- saisit le nom de sortie
   set name_out "miroir_x"
   ::testaudela::putLabelEntry $w.sortie.out "$name_out"
   #--   clic sur le bouton Appliquer
   ::testaudela::clicButton $w.cmd.appliquer
   #--   miroir_x3 est chargée automatiquement

   #--   procedure de controle
   set result 0
   #--   verifie le deplacement du point {227 108}
   #--   naxis1=347 => colonne centrale=174
   #--   point 227 => delta =227-174=53 ; symétrique = 174-53 =121
   set x [ expr {int(174-(227-174))}]
   set mesure [lrange [buf$bufNo getpix [list $x 108]] 1 end]
   if {$mesure eq "$attendu"} {set result 1}
   foreach file [list ${name_out}1r.jpg ${name_out}1g.jpg ${name_out}1b.jpg \
      ${name_out}2r.jpg ${name_out}2g.jpg ${name_out}2b.jpg \
       ${name_out}3r.jpg ${name_out}3g.jpg ${name_out}3b.jpg] {
      if {[file exists $file]} {incr result}
   }
   return $result
} -cleanup $CLEANUP -result "10"

#--   nature du test IMA/SERIES INVERT flip :
#     constance des intensites RGB lors du deplacement du point {227 108}
test imaseries_mirror_y {miroir horizontal de rz_rgbr_8 rz_rgbr_15 rz_rgbr_30} -constraints {AUDACE} -setup $SETUP -body {
   #--   clic sur le menu "Images/Transformer/Miroir horizontal..."
   ::testaudela::clicMenu $visuNo "$::caption(audace,menu,transform)" "$::caption(audace,menu,miroir_y)..."
   #--   selectionne rz_rgbr_8 rz_rgbr_15 rz_rgbr_30
   foreach img {rz_rgbr_8 rz_rgbr_15 rz_rgbr_30} {
      set k [lsearch [$w.choix getcolumns 1] $img]
      ::testaudela::clicCheckButton [$w.choix windowpath $k,0] 1
   }
   #--   selectionne l'option "Options"
   ::testaudela::clicCheckButton $w.ttoptions.che "1"
   #--   selectionne l'option "jpegfile"
   ::testaudela::clicCheckButton $w.ttoptions.jpegfile "1"
   #-- saisit le nom de sortie
   set name_out "miroir_y"
   ::testaudela::putLabelEntry $w.sortie.out "$name_out"
   #--   clic sur le bouton Appliquer
   ::testaudela::clicButton $w.cmd.appliquer
   #--   miroir_y3 est chargée automatiquement

   #--   procedure de controle
   set result 0
   #--   verifie le deplacement du point {227 108}
   #--   naxis2=231 => colonne centrale=116
   #--   point 108 => delta =108-116=-8 ; symétrique = 116+8 =124
   set y [ expr {int(116-(108-116))}]
   set mesure [lrange [buf$bufNo getpix [list 227 $y]] 1 end]
   if {$mesure eq "$attendu"} {set result 1}
   foreach file [list ${name_out}1r.jpg ${name_out}1g.jpg ${name_out}1b.jpg \
      ${name_out}2r.jpg ${name_out}2g.jpg ${name_out}2b.jpg \
      ${name_out}3r.jpg ${name_out}3g.jpg ${name_out}3b.jpg] {
      if {[file exists $file]} {incr result}
   }
   return $result
} -cleanup $CLEANUP -result "10"

#--   nature du test IMA/SERIES INVERT xy :
#     constance des intensites RGB lors du deplacement du point {227 108}
test imaseries_mirror_xy {miroir diagonal de rz_rgbr_8 rz_rgbr_15 rz_rgbr_30} -constraints {AUDACE} -setup $SETUP -body {
   #--   clic sur le menu "Images/Transformer/Miroir diagonal..."
   ::testaudela::clicMenu $visuNo "$::caption(audace,menu,transform)" "$::caption(audace,menu,miroir_xy)..."
   #--   selectionne rz_rgbr_8 rz_rgbr_15 rz_rgbr_30
   foreach img {rz_rgbr_8 rz_rgbr_15 rz_rgbr_30} {
      set k [lsearch [$w.choix getcolumns 1] $img]
      ::testaudela::clicCheckButton [$w.choix windowpath $k,0] 1
   }
   #--   selectionne l'option "Options"
   ::testaudela::clicCheckButton $w.ttoptions.che "1"
   #--   selectionne l'option "jpegfile"
   ::testaudela::clicCheckButton $w.ttoptions.jpegfile "1"
   #-- saisit le nom de sortie
   set name_out "miroir_xy"
   ::testaudela::putLabelEntry $w.sortie.out "$name_out"
   #--   clic sur le bouton Appliquer
   ::testaudela::clicButton $w.cmd.appliquer
   #--   miroir_xy3 est chargée automatiquement

   #--   procedure de controle
    set result 0
   #--   verifie le deplacement du point {227 108}
   set mesure [lrange [buf$bufNo getpix {108 227}] 1 end]
   if {$mesure eq "$attendu"} {set result 1}
   foreach file [list ${name_out}1r.jpg ${name_out}1g.jpg ${name_out}1b.jpg \
      ${name_out}2r.jpg ${name_out}2g.jpg ${name_out}2b.jpg \
      ${name_out}3r.jpg ${name_out}3g.jpg ${name_out}3b.jpg] {
      if {[file exists $file]} {incr result}
   }
   return $result
} -cleanup $CLEANUP -result "10"

#--   nature du test IMA/SERIES TRANS :
#     constance des intensites RGB lors du deplacement du point {227 108}
test imaseries_trans {translation de de rz_rgbr_8 rz_rgbr_15 rz_rgbr_30} -constraints {AUDACE} -setup $SETUP -body {
   #--   clic sur le menu "Images/Transformer/Translater..."
   ::testaudela::clicMenu $visuNo "$::caption(audace,menu,transform)" "$::caption(audace,menu,translate)..."
   #--   selectionne rz_rgbr_8 rz_rgbr_15 rz_rgbr_30
   foreach img {rz_rgbr_8 rz_rgbr_15 rz_rgbr_30} {
      set k [lsearch [$w.choix getcolumns 1] $img]
      ::testaudela::clicCheckButton [$w.choix windowpath $k,0] 1
   }
   #--saisit les entrees
   ::testaudela::putLabelEntry $w.funoptions.trans_x -20
   ::testaudela::putLabelEntry $w.funoptions.trans_y 20
   #--   selectionne l'option "Options"
  ::testaudela::clicCheckButton $w.ttoptions.che "1"
   #--   selectionne l'option "jpegfile"
   ::testaudela::clicCheckButton $w.ttoptions.jpegfile "1"
   #-- saisit le nom de sortie
   set name_out "translate"
   ::testaudela::putLabelEntry $w.sortie.out "$name_out"
   #--   clic sur le bouton Appliquer
   ::testaudela::clicButton $w.cmd.appliquer
   #--   translate3 est chargée automatiquement

   #--   procedure de controle
   set result 0
   #--   verifie le deplacement du point {227 108}
   set mesure [lrange [buf$bufNo getpix {207 128}] 1 end]
   if {"$attendu" eq "$mesure"} {set result 1}
   foreach file [list ${name_out}1r.jpg ${name_out}1g.jpg ${name_out}1b.jpg \
      ${name_out}2r.jpg ${name_out}2g.jpg ${name_out}2b.jpg \
      ${name_out}3r.jpg ${name_out}3g.jpg ${name_out}3b.jpg] {
      if {[file exists $file]} {incr result}
   }
   return $result
} -cleanup $CLEANUP -result "10"

#-----------------------------------------------------------------------------
#--   chaque test WINDOW et RESAMPLE a pour entree trois images RGB a traiter
#--   l'option jpegfile est testee systematiquement
#--   le test porte sur :
#        l'existence de 9 fichiers jpeg
#        les dimensions naxis1 et naxis2
#-----------------------------------------------------------------------------

#--   IMA/SERIES WINDOW
test imaseries_window {fenetrage de rz_rgbr_8 rz_rgbr_15 rz_rgbr_30} -constraints {AUDACE} -setup $SETUP -body {
   #--   clic sur le menu "Images/Transformer/Recadrer..."
   ::testaudela::clicMenu $visuNo "$::caption(audace,menu,transform)" "$::caption(audace,menu,window1)..."
   #--   selectionne rz_rgbr_8 rz_rgbr_15 rz_rgbr_30
   foreach file {rz_rgbr_8 rz_rgbr_15 rz_rgbr_30} {
      set k [lsearch [$w.choix  getcolumns 1] $file]
      ::testaudela::clicCheckButton [$w.choix windowpath $k,0] 1
   }
   #-- saisit les coordonnees de x1 y1 x2 y2
   foreach dim {x1 y1 x2 y2} val [list 111 159 230 30] {
       ::testaudela::putLabelEntry $w.funoptions.$dim $val
   }
   #--   selectionne l'option "Options"
   ::testaudela::clicCheckButton $w.ttoptions.che "1"
   #--   selectionne l'option "jpegfile"
   ::testaudela::clicCheckButton $w.ttoptions.jpegfile "1"
   #-- saisit le nom de sortie
   set name_out "fenetre"
   ::testaudela::putLabelEntry $w.sortie.out "$name_out"
   #--   clic sur le bouton Appliquer
   ::testaudela::clicButton $w.cmd.appliquer

   #--   procedure de controle
   set result 0
   if {[lindex [buf$bufNo getkwd NAXIS1] 1] == "120"} {incr result}
   if {[lindex [buf$bufNo getkwd NAXIS2] 1] == "130"} {incr result}
   foreach file [list ${name_out}1r.jpg ${name_out}1g.jpg ${name_out}1b.jpg \
      ${name_out}2r.jpg ${name_out}2g.jpg ${name_out}2b.jpg \
      ${name_out}3r.jpg ${name_out}3g.jpg ${name_out}3b.jpg] {
      if {[file exists $file]} {incr result}
   }
   return $result
} -cleanup $CLEANUP -result "11"

#--   test IMA/SERIES RESAMPLE :
test imaseries_paramresample {re-echantillonage de rz_rgbr_8 rz_rgbr_15 rz_rgbr_30} -constraints {AUDACE} -setup $SETUP -body {
   #--   clic sur le menu "Images/Transformer/Re-échantillonner..."
   ::testaudela::clicMenu $visuNo "$::caption(audace,menu,transform)" "$::caption(audace,menu,scale)..."
   #--   selectionne rz_rgbr_8 rz_rgbr_15 rz_rgbr_30
   foreach img {rz_rgbr_8 rz_rgbr_15 rz_rgbr_30} {
      set k [lsearch [$w.choix getcolumns 1] $img]
      ::testaudela::clicCheckButton [$w.choix windowpath $k,0] 1
   }
   set ::prtr::paramresample "0.5 0 0 0 0.5 0"
   #--   selectionne l'option "Options"
   ::testaudela::clicCheckButton $w.ttoptions.che "1"
   #--   selectionne l'option "jpegfile"
   ::testaudela::clicCheckButton $w.ttoptions.jpegfile "1"
   #-- saisit le nom de sortie
   set name_out "resample"
   ::testaudela::putLabelEntry $w.sortie.out "$name_out"
   #--   clic sur le bouton Appliquer
   ::testaudela::clicButton $w.cmd.appliquer
   #--   dim3 est chargée automatiquement

   #--   procedure de controle
   set result 0
   #--   compare les dimensions des images
   if {[expr {$naxis1/[lindex [buf$bufNo getkwd NAXIS1] 1]}] == "2" } {incr result}
   if {[expr {$naxis2/[lindex [buf$bufNo getkwd NAXIS2] 1]}] == "2" } {incr result}
   foreach file [list ${name_out}1r.jpg ${name_out}1g.jpg ${name_out}1b.jpg \
      ${name_out}2r.jpg ${name_out}2g.jpg ${name_out}2b.jpg \
      ${name_out}3r.jpg ${name_out}3g.jpg ${name_out}3b.jpg] {
      if {[file exists $file]} {incr result}
   }
   return $result
} -cleanup $CLEANUP -result "11"

#-----------------------------------------------------------------------------
#--   chaque test BINX BINY MEDIANX MEDIANY a pour entree trois images RGB a traiter
#--   l'option jpegfile est testee systematiquement
#--   le test porte sur :
#        l'existence de 9 fichiers jpeg
#        la concordance entre les valeurs au point {1 1} et les valeurs calculees
#-----------------------------------------------------------------------------

#--   test IMA/SERIES BINX
test imaseries_bin_x {binning des colonnes de rz_rgbr_8 rz_rgbr_15 rz_rgbr_30} -constraints {AUDACE} -setup $SETUP2 -body {
   for {set i 101} {$i <= 110} {incr i} {
      set val [lrange [buf$bufNo getpix [list $i 1]] 1 end ]
      redValue append [lindex $val 0]
      greenValue append [lindex $val 1]
      blueValue append [lindex $val 2]
   }
   attendu append $redValue(sum) $greenValue(sum) $blueValue(sum)
   #---  efface l'image
   ::confVisu::deleteImage $visuNo

   #--   clic sur le menu "Images/Transformer/Somme de colonnes..."
   ::testaudela::clicMenu $visuNo "$::caption(audace,menu,transform)" "$::caption(audace,menu,bin_x)..."
   #--   selectionne rz_rgbr_8 rz_rgbr_15 rz_rgbr_30
   foreach img {rz_rgbr_8 rz_rgbr_15 rz_rgbr_30} {
      set k [lsearch [$w.choix getcolumns 1] $img]
     ::testaudela::clicCheckButton [$w.choix windowpath $k,0] 1
   }
   #--   saisit les entrees
   ::testaudela::putLabelEntry $w.funoptions.x1 "101"
   ::testaudela::putLabelEntry $w.funoptions.x2 "110"
   set width "5"
   ::testaudela::putLabelEntry $w.funoptions.width $width
   #--   selectionne l'option "Options"
   ::testaudela::clicCheckButton $w.ttoptions.che "1"
   #--   selectionne l'option "jpegfile"
   ::testaudela::clicCheckButton $w.ttoptions.jpegfile "1"
   #-- saisit le nom de sortie
   set name_out "add_col"
   ::testaudela::putLabelEntry $w.sortie.out "$name_out"
   #--   clic sur le bouton Appliquer
   ::testaudela::clicButton $w.cmd.appliquer
   #--   add_col3 est chargée automatiquement

   #--   procedure de controle
   set result 0
   if {[lindex [buf$bufNo getkwd NAXIS1] 1] == $width} {incr result}
   #--   cherche la valeur du point {1 1}
   mesure set [lrange [buf$bufNo getpix {1 1}] 1 end]
   attendu expr {round(attendu-mesure)}
   #--   nb de difference < 1
   attendu expr {abs(attendu) <= 1.0}
   incr result [llength [attendu search 1]]
   foreach file [list ${name_out}1r.jpg ${name_out}1g.jpg ${name_out}1b.jpg \
      ${name_out}2r.jpg ${name_out}2g.jpg ${name_out}2b.jpg \
      ${name_out}3r.jpg ${name_out}3g.jpg ${name_out}3b.jpg] {
      if {[file exists $file]} {incr result}
   }
   ::blt::vector destroy attendu mesure redValue greenValue blueValue temp
   return $result
} -cleanup $CLEANUP -result "13"

#--   test IMA/SERIES MEDIANX
test imaseries_median_x {mediane des colonnes de rz_rgbr_8 rz_rgbr_15 rz_rgbr_30} -constraints {AUDACE} -setup $SETUP2 -body {
   for {set i 101} {$i <= 200} {incr i} {
      set val [lrange [buf$bufNo getpix [list $i 1]] 1 end ]
      redValue append [lindex $val 0]
      greenValue append [lindex $val 1]
      blueValue append [lindex $val 2]
   }
   foreach vector {redValue greenValue blueValue} {
      temp expr {median($vector)}
      attendu append temp
   }
   #---  efface l'image
   ::confVisu::deleteImage $visuNo
   #--   clic sur le menu "Images/Transformer/Médiane de colonnes..."
   ::testaudela::clicMenu $visuNo "$::caption(audace,menu,transform)" "$::caption(audace,menu,med_x)..."
   #--   selectionne rz_rgbr_8 rz_rgbr_15 rz_rgbr_30
   foreach img {rz_rgbr_8 rz_rgbr_15 rz_rgbr_30} {
      set k [lsearch [$w.choix getcolumns 1] $img]
     ::testaudela::clicCheckButton [$w.choix windowpath $k,0] 1
   }
   #--   saisit les entrees
   ::testaudela::putLabelEntry $w.funoptions.x1 "101"
   ::testaudela::putLabelEntry $w.funoptions.x2 "200"
   set width "28"
   ::testaudela::putLabelEntry $w.funoptions.width "$width"
   #--   selectionne l'option "Options"
   ::testaudela::clicCheckButton $w.ttoptions.che "1"
   #--   selectionne l'option "jpegfile"
   ::testaudela::clicCheckButton $w.ttoptions.jpegfile "1"
   #-- saisit le nom de sortie
   set name_out "medianx"
   ::testaudela::putLabelEntry $w.sortie.out "$name_out"
   #--   clic sur le bouton Appliquer
   ::testaudela::clicButton $w.cmd.appliquer

   #--   procedure de controle
   set result 0
   if {[lindex [buf$bufNo getkwd NAXIS1] 1] == $width} {incr result}
   #--   cherche la valeur du point {1 1}
   mesure set [lrange [buf$bufNo getpix {1 1}] 1 end]
   attendu expr {round(attendu-mesure)}
   #--   nb de difference < 1
   attendu expr {abs(attendu) <= 1.0}
   incr result [llength [attendu search 1]]
   foreach file [list ${name_out}1r.jpg ${name_out}1g.jpg ${name_out}1b.jpg \
      ${name_out}2r.jpg ${name_out}2g.jpg ${name_out}2b.jpg \
      ${name_out}3r.jpg ${name_out}3g.jpg ${name_out}3b.jpg] {
      if {[file exists $file]} {incr result}
   }
   ::blt::vector destroy attendu mesure redValue greenValue blueValue temp
   return $result
} -cleanup $CLEANUP -result "13"

#--   nature du test IMA/SERIES SORTX :
#     concordance des intensites R G B constatees avec celles calculees
test imaseries_sortx {valeur triée des colonnes de rz_rgbr_8 rz_rgbr_15 rz_rgbr_30} -constraints {AUDACE} -setup $SETUP2 -body {
   for {set i 101} {$i <= 200} {incr i} {
      set val [lrange [buf$bufNo getpix [list $i 1]] 1 end ]
      redValue append [lindex $val 0]
      greenValue append [lindex $val 1]
      blueValue append [lindex $val 2]
   }
   #--   definit le niveau
   set seuil "30"
   #--
   set index [expr {int([redValue length]*$seuil/100)}]
   #--   constitue le vecteur de sortie
   foreach v {redValue greenValue blueValue} {
      #--   tri par ordre ascendant
      $v sort
      attendu append [$v range $index $index]
   }
   #---  efface l'image
   ::confVisu::deleteImage $visuNo
   #--   clic sur le menu "Images/Transformer/Valeur triée de colonnes..."
   ::testaudela::clicMenu $visuNo "$::caption(audace,menu,transform)" "$::caption(audace,menu,sort_x)..."
   #--   selectionne rz_rgbr_8 rz_rgbr_15 rz_rgbr_30
   foreach img {rz_rgbr_8 rz_rgbr_15 rz_rgbr_30} {
      set k [lsearch [$w.choix getcolumns 1] $img]
     ::testaudela::clicCheckButton [$w.choix windowpath $k,0] 1
   }
   #--   saisit les entrees
   ::testaudela::putLabelEntry $w.funoptions.x1 "101"
   ::testaudela::putLabelEntry $w.funoptions.x2 "200"
   set width "28"
   ::testaudela::putLabelEntry $w.funoptions.width "$width"
   set seuil "30"
   ::testaudela::putLabelEntry $w.funoptions.percent $seuil
   #--   selectionne l'option "Options"
   ::testaudela::clicCheckButton $w.ttoptions.che "1"
   #--   selectionne l'option "jpegfile"
   ::testaudela::clicCheckButton $w.ttoptions.jpegfile "1"
   #-- saisit le nom de sortie
   set name_out "sortx"
   ::testaudela::putLabelEntry $w.sortie.out "$name_out"
   #--   clic sur le bouton Appliquer
   ::testaudela::clicButton $w.cmd.appliquer

   #--   procedure de controle
   set result 0
   if {[lindex [buf$bufNo getkwd NAXIS1] 1] == $width} {incr result}
   #--   cherche la valeur du point {1 1}
   mesure set [lrange [buf$bufNo getpix {1 1}] 1 end]
   attendu expr {round(attendu-mesure)}
   #--   nb de difference < 1
   attendu expr {abs(attendu) <= 1.0}
   incr result [llength [attendu search 1]]
   foreach file [list ${name_out}1r.jpg ${name_out}1g.jpg ${name_out}1b.jpg \
      ${name_out}2r.jpg ${name_out}2g.jpg ${name_out}2b.jpg \
      ${name_out}3r.jpg ${name_out}3g.jpg ${name_out}3b.jpg] {
      if {[file exists $file]} {incr result}
   }
   ::blt::vector destroy attendu mesure redValue greenValue blueValue
   return $result
} -cleanup $CLEANUP -result "13"

#--   test IMA/SERIES BINY
test imaseries_bin_y {binning des lignes de rz_rgbr_8 rz_rgbr_15 rz_rgbr_30} -constraints {AUDACE} -setup $SETUP2 -body {
   for {set i 101} {$i <= 200} {incr i} {
     set val [lrange [buf$bufNo getpix [list 1 $i]] 1 end ]
      redValue append [lindex $val 0]
      greenValue append [lindex $val 1]
      blueValue append [lindex $val 2]
   }
   attendu append $redValue(sum) $greenValue(sum) $blueValue(sum)
   #---  efface l'image
   ::confVisu::deleteImage $visuNo

   #--   clic sur le menu "Images/Transformer/Somme de lignes..."
   ::testaudela::clicMenu $visuNo "$::caption(audace,menu,transform)" "$::caption(audace,menu,bin_y)..."
   #--   selectionne rz_rgbr_8 rz_rgbr_15 rz_rgbr_30
   foreach img {rz_rgbr_8 rz_rgbr_15 rz_rgbr_30} {
      set k [lsearch [$w.choix getcolumns 1] $img]
      ::testaudela::clicCheckButton [$w.choix windowpath $k,0] 1
   }
   #--   saisit les entrees
   ::testaudela::putLabelEntry $w.funoptions.y1 "101"
   ::testaudela::putLabelEntry $w.funoptions.y2 "200"
   set height "1"
   ::testaudela::putLabelEntry $w.funoptions.height $height
   #--   selectionne l'option "Options"
   ::testaudela::clicCheckButton $w.ttoptions.che "1"
   #--   selectionne l'option "jpegfile"
   ::testaudela::clicCheckButton $w.ttoptions.jpegfile "1"
   #-- saisit le nom de sortie
   set name_out "add_li"
   ::testaudela::putLabelEntry $w.sortie.out "$name_out"
   #--   clic sur le bouton Appliquer
   ::testaudela::clicButton $w.cmd.appliquer

   #--   procedure de controle
   set result 0
   if {[lindex [buf$bufNo getkwd NAXIS2] 1] == $height} {incr result}
   #--   cherche la valeur du point {1 1}
   mesure set [lrange [buf$bufNo getpix {1 1}] 1 end]
   attendu expr {round(attendu-mesure)}
   #--   nb de difference < 1
   attendu expr {abs(attendu) <= 1.0}
   incr result [llength [attendu search 1]]
   foreach file [list ${name_out}1r.jpg ${name_out}1g.jpg ${name_out}1b.jpg \
      ${name_out}2r.jpg ${name_out}2g.jpg ${name_out}2b.jpg \
      ${name_out}3r.jpg ${name_out}3g.jpg ${name_out}3b.jpg] {
      if {[file exists $file]} {incr result}
   }
   ::blt::vector destroy attendu mesure redValue greenValue blueValue temp
   return $result
} -cleanup $CLEANUP -result "13"

#--   test IMA/SERIES MEDIANY
test imaseries_median_y {mediane des colonnes de rz_rgbr_8 rz_rgbr_15 rz_rgbr_30} -constraints {AUDACE} -setup $SETUP2 -body {
   for {set i 101} {$i <= 200} {incr i} {
      set val [lrange [buf$bufNo getpix [list 1 $i]] 1 end ]
      redValue append [lindex $val 0]
      greenValue append [lindex $val 1]
      blueValue append [lindex $val 2]
   }
  #---  efface l'image
   ::confVisu::deleteImage $visuNo
  #--   clic sur le menu "Images/Transformer/Médiane de lignes..."
   ::testaudela::clicMenu $visuNo "$::caption(audace,menu,transform)" "$::caption(audace,menu,med_y)..."
   #--   selectionne rz_rgbr_8 rz_rgbr_15 rz_rgbr_30
   foreach img {rz_rgbr_8 rz_rgbr_15 rz_rgbr_30} {
      set k [lsearch [$w.choix getcolumns 1] $img]
     ::testaudela::clicCheckButton [$w.choix windowpath $k,0] 1
   }
   #--   saisit les entrees
  ::testaudela::putLabelEntry $w.funoptions.y1 "101"
   ::testaudela::putLabelEntry $w.funoptions.y2 "200"
   set height "45"
   ::testaudela::putLabelEntry $w.funoptions.height $height
   #--   selectionne l'option "Options"
   ::testaudela::clicCheckButton $w.ttoptions.che "1"
   #--   selectionne l'option "jpegfile"
   ::testaudela::clicCheckButton $w.ttoptions.jpegfile "1"
   #-- saisit le nom de sortie
   set name_out "mediany"
   ::testaudela::putLabelEntry $w.sortie.out "$name_out"
   #--   clic sur le bouton Appliquer
   ::testaudela::clicButton $w.cmd.appliquer

   #--   procedure de controle
   set result 0
   if {[lindex [buf$bufNo getkwd NAXIS2] 1] == $height} {incr result}
   #--   cherche la valeur du point {1 1}
   mesure set [lrange [buf$bufNo getpix {1 1}] 1 end]
   foreach vector {redValue greenValue blueValue} {
      temp expr {median($vector)}
      attendu append temp
   }
   attendu expr {round(attendu-mesure)}
   #--   nb de differences egale a 1
   attendu expr {abs(attendu) <= 1.0}
   incr result [llength [attendu search 1]]
   foreach file [list ${name_out}1r.jpg ${name_out}1g.jpg ${name_out}1b.jpg \
      ${name_out}2r.jpg ${name_out}2g.jpg ${name_out}2b.jpg \
      ${name_out}3r.jpg ${name_out}3g.jpg ${name_out}3b.jpg] {
      if {[file exists $file]} {incr result}
   }
   ::blt::vector destroy attendu mesure redValue greenValue blueValue temp
   return $result
} -cleanup $CLEANUP -result "13"

#--   nature du test IMA/SERIES SORTY :
#     concordance des intensites R G B constatees avec celles calculees
test imaseries_sorty {valeur triée des colonnes de rz_rgbr_8 rz_rgbr_15 rz_rgbr_30} -constraints {AUDACE} -setup $SETUP2 -body {
   for {set i 101} {$i <= 200} {incr i} {
      set val [lrange [buf$bufNo getpix [list 1 $i]] 1 end ]
      redValue append [lindex $val 0]
      greenValue append [lindex $val 1]
      blueValue append [lindex $val 2]
   }
   #--   definit le niveau
   set seuil "30"
   #--
   set index [expr {int([redValue length]*$seuil/100)}]
   #--   constitue le vecteur de sortie
   foreach v {redValue greenValue blueValue} {
      #--   tri par ordre ascendant
      $v sort
      attendu append [$v range $index $index]
   }
   #---  efface l'image
   ::confVisu::deleteImage $visuNo
   #--   clic sur le menu "Images/Transformer/Valeur triée de lignes..."
   ::testaudela::clicMenu $visuNo "$::caption(audace,menu,transform)" "$::caption(audace,menu,sort_y)..."
   #--   selectionne rz_rgbr_8 rz_rgbr_15 rz_rgbr_30
   foreach img {rz_rgbr_8 rz_rgbr_15 rz_rgbr_30} {
      set k [lsearch [$w.choix getcolumns 1] $img]
     ::testaudela::clicCheckButton [$w.choix windowpath $k,0] 1
   }
   #--   saisit les entrees
   ::testaudela::putLabelEntry $w.funoptions.y1 "101"
   ::testaudela::putLabelEntry $w.funoptions.y2 "200"
   set height "50"
   ::testaudela::putLabelEntry $w.funoptions.height "$height"
   ::testaudela::putLabelEntry $w.funoptions.percent $seuil
   #--   selectionne l'option "Options"
   ::testaudela::clicCheckButton $w.ttoptions.che "1"
   #--   selectionne l'option "jpegfile"
   ::testaudela::clicCheckButton $w.ttoptions.jpegfile "1"
   #-- saisit le nom de sortie
   set name_out "sorty"
   ::testaudela::putLabelEntry $w.sortie.out "$name_out"
   #--   clic sur le bouton Appliquer
   ::testaudela::clicButton $w.cmd.appliquer

   #--   procedure de controle
   set result 0
   if {[lindex [buf$bufNo getkwd NAXIS2] 1] == $height} {incr result}
   #--   cherche la valeur du point {1 1}
   mesure set [lrange [buf$bufNo getpix {1 1}] 1 end]
   attendu expr {round(attendu-mesure)}
   #--   nb de difference < 1
   attendu expr {abs(attendu) <= 1.0}
   incr result [llength [attendu search 1]]
   foreach file [list ${name_out}1r.jpg ${name_out}1g.jpg ${name_out}1b.jpg \
      ${name_out}2r.jpg ${name_out}2g.jpg ${name_out}2b.jpg \
      ${name_out}3r.jpg ${name_out}3g.jpg ${name_out}3b.jpg] {
      if {[file exists $file]} {incr result}
   }
   ::blt::vector destroy attendu mesure redValue greenValue blueValue
   return $result
} -cleanup $CLEANUP -result "13"


#-----------------------------------------------------------------------------
#--   le test ROT a pour entree une image RGB a traiter
#--   l'option jpegfile est testee systematiquement
#--   le test porte sur :
#        l'existence de 3 fichiers jpeg
#        constance des intensites RGB lors du deplacement du point {227 108}
#        apres un demi-tour puis un autre demi_tour
#-----------------------------------------------------------------------------

#--   test IMA/SERIES ROT
test imaseries_rotation1 {rotation de rz_rgbr_30} -constraints {AUDACE} -setup {
   file copy -force [file join $::conf(testaudela,rep_images) rz_rgbr_30.fit] $::audace(rep_images)
   loadima [file join $::audace(rep_images) rz_rgbr_30.fit]
   set attendu [lrange [buf$bufNo getpix {227 108}] 1 end]
} -body {
   #--   clic sur le menu "Images/Transformer/Rotation 1..."
   ::testaudela::clicMenu $visuNo "$::caption(audace,menu,transform)" "$::caption(audace,menu,rotation1)..."
   #--   saisit les coordonnees du centre
   ::testaudela::putLabelEntry $w.funoptions.x0 "173."
   ::testaudela::putLabelEntry $w.funoptions.y0 "96.5"
   #--   saisit l'angle de rotation
   ::testaudela::putLabelEntry $w.funoptions.angle "180."
   #--   selectionne l'option "Options"
   ::testaudela::clicCheckButton $w.ttoptions.che "1"
   #--   selectionne l'option "jpegfile"
   ::testaudela::clicCheckButton $w.ttoptions.jpegfile "1"
   #-- saisit le nom de sortie
   set name_out "demi-tour"
   ::testaudela::putLabelEntry $w.sortie.out $name_out
   #--   clic sur le bouton Appliquer
   ::testaudela::clicButton $w.cmd.appliquer

   #--   premier controle
   set result 0
   #--   verifie le deplacement du point {227 108}
   set intensite1 [lrange [buf$bufNo getpix {121 87}] 1 end]
   if {$attendu eq "$intensite1"} {incr result}

   #--   selectionne demi-tour
   set k [lsearch [$w.choix getcolumns 1] demi-tour]
   ::testaudela::clicCheckButton [$w.choix windowpath $k,0] 1
   #--   deselectionne l'option "jpegfile"
   ::testaudela::clicCheckButton $w.ttoptions.jpegfile "0"
   #-- saisit le nom de sortie
   ::testaudela::putLabelEntry $w.sortie.out "un_tour"
   #--   clic sur le bouton Appliquer
   ::testaudela::clicButton $w.cmd.appliquer
   #--   untour est chargée automatiquement
   #--   second controle
   #--   verifie le deplacement du point {227 108}
   set intensite2 [lrange [buf$bufNo getpix {227 108}] 1 end]
   if {$attendu eq "$intensite2"} {incr result}
   foreach file [list demi-tourr.jpg demi-tourg.jpg demi-tourb.jpg] {
      if {[file exists $file]} {incr result}
   }
   set liste [list rz_rgbr_30 demi-tour]
   return $result
 } -cleanup $CLEANUP2 -result "5"

#-----------------------------------------------------------------------------
#--   le test ROTENTIERE a pour entree une image RGB a traiter
#--   l'option jpegfile est testee systematiquement
#--   le test porte sur :
#        l'existence de 3 fichiers jpeg
#        constance des intensites RGB lors du deplacement du point {227 108} apres un tour
#     attention les naxis ne sont pas conserves
#-----------------------------------------------------------------------------

#--   test IMA/SERIES ROTENTIERE
test imaseries_rotation2 {rotation de untour} -constraints {AUDACE} -setup {
   loadima [file join $::audace(rep_images) un_tour.fit]
} -body {
   #--   clic sur le menu "Images/Transformer/Rotation2..."
   ::testaudela::clicMenu $visuNo "$::caption(audace,menu,transform)" "$::caption(audace,menu,rotation2)..."
   ::testaudela::putLabelEntry $w.funoptions.x0 "173.5"
   ::testaudela::putLabelEntry $w.funoptions.y0 "96.5"
   ::testaudela::putLabelEntry $w.funoptions.angle "360"
   #--   selectionne l'option "Options"
   ::testaudela::clicCheckButton $w.ttoptions.che "1"
   #--   selectionne l'option "jpegfile"
   ::testaudela::clicCheckButton $w.ttoptions.jpegfile "1"
   #-- saisit le nom de sortie
  set name_out "deux_tours"
   ::testaudela::putLabelEntry $w.sortie.out "$name_out"
   #--   clic sur le bouton Appliquer
   ::testaudela::clicButton $w.cmd.appliquer

   #--   procedure de controle
   set result 0
   #--   verifie le deplacement du point {227 108}
   set mesure "[lrange [buf$bufNo getpix [list 226 108]] 1 end]"
   if {$mesure eq [list 1304.000000 1192.000000 537.000000]} {incr result}
   #--   les naxis ne sont pas conservés
   foreach file [list ${name_out}r.jpg ${name_out}g.jpg ${name_out}b.jpg] {
      if {[file exists $file]} {incr result}
   }
   set liste [ list un_tour deux_tours]
   return $result
 } -cleanup $CLEANUP2 -result "4"

#-----------------------------------------------------------------------------
#--   le test REC2POL a pour entree une image RGB a traiter
#--   l'option jpegfile est testee systematiquement
#--   le test porte sur :
#        l'existence de 3 fichiers jpeg
#        naxis1 = 361
#-----------------------------------------------------------------------------
#--   IMA/SERIES REC2POL :
test imaseries_rec2pol {coordonnees polaires de rz_rgbr_8} -constraints {AUDACE} -setup {
  file copy -force [file join $::conf(testaudela,rep_images) rz_rgbr_8.fit] $::audace(rep_images)
} -body {
   #--   clic sur le menu "Images/Transformer/Cartésien-->polaire..."
   ::testaudela::clicMenu $visuNo "$::caption(audace,menu,transform)" "$::caption(audace,menu,cart2pol)..."
   #--   selectionne rz_rgbr_8
   set k [lsearch [$w.choix getcolumns 1] rz_rgbr_8]
   ::testaudela::clicCheckButton [$w.choix windowpath $k,0] 1
   #--   entre les coordonnees du centre
   ::testaudela::putLabelEntry $w.funoptions.x0 "173"
   ::testaudela::putLabelEntry $w.funoptions.y0 "96.5"
   #--   pm scale_theta et scale_rho valent 1
   #--   selectionne l'option "Options"
   ::testaudela::clicCheckButton $w.ttoptions.che "1"
   #--   selectionne l'option "jpegfile"
   ::testaudela::clicCheckButton $w.ttoptions.jpegfile "1"
   #-- saisit le nom de sortie
   set name_out "polaire"
   ::testaudela::putLabelEntry $w.sortie.out "$name_out"
   #--   clic sur le bouton Appliquer
   ::testaudela::clicButton $w.cmd.appliquer

   #--   polaire est chargée automatiquement
   set result 0
   if {[lindex [buf$bufNo getkwd NAXIS1] 1] == "361"} {incr result}
   foreach file [list ${name_out}r.jpg ${name_out}g.jpg ${name_out}b.jpg] {
      if {[file exists $file]} {incr result}
   }
   return $result
} -cleanup {
   #--   clic sur le bouton Fermer
   ::testaudela::clicButton $w.cmd.fermer
   #---  efface l'image
   file delete "./${name_out}r.jpg" "./${name_out}g.jpg" "./${name_out}b.jpg"
} -result "4"

#-----------------------------------------------------------------------------
#--   le test REC2POL a pour entree une image polaire cree lors du test rect2pol
#--   l'option jpegfile est testee systematiquement
#--   le test porte sur :
#        l'existence de 3 fichiers jpeg
#        naxis1 et naxis2
#     les intensites ne sont pas conservees
#-----------------------------------------------------------------------------
#--   nature du test IMA/SERIES POL2REC :
#     2- pol2rec((rect2pol(polaire.fit))==polaire.fit
test imaseries_pol2rec {coordonnees rectangulaires polaire.fit} -constraints {AUDACE} -setup {} -body {
   #--   clic sur le menu "Rotation2" de le fenetre de 'Images' restee ouverte
   ::testaudela::clicMenu $visuNo "$::caption(audace,menu,transform)" "$::caption(audace,menu,pol2cart)..."
   #--   selectionne polaire
   set k [lsearch [$w.choix getcolumns 1] polaire]
   ::testaudela::clicCheckButton [$w.choix windowpath $k,0] 1
   #--   restitue les coordonnees du centre
   ::testaudela::putLabelEntry $w.funoptions.x0 "173"
   ::testaudela::putLabelEntry $w.funoptions.y0 "96.5"
   #--   restitue les dimensions
   ::testaudela::putLabelEntry $w.funoptions.width "337"
   ::testaudela::putLabelEntry $w.funoptions.height "218"
   #--   selectionne l'option "Options"
   ::testaudela::clicCheckButton $w.ttoptions.che "1"
   #--   selectionne l'option jpegfile
   ::testaudela::clicCheckButton $w.ttoptions.jpegfile "1"
   ::testaudela::putLabelEntry $w.ttoptions.jpeg_quality "100"
   #-- saisit le nom de sortie
   set name_out "rectangle"
   ::testaudela::putLabelEntry $w.sortie.out "$name_out"
   #--   clic sur le bouton Appliquer
   ::testaudela::clicButton $w.cmd.appliquer

   #--   procedure de controle
   set result 0
   if {[lindex [buf$bufNo getkwd NAXIS1] 1] == "337"} {incr result}
   if {[lindex [buf$bufNo getkwd NAXIS2] 1] == "218"} {incr result}
   foreach file [list ${name_out}r.jpg ${name_out}g.jpg ${name_out}b.jpg] {
      if {[file exists $file]} {incr result}
   }
   set liste [list rz_rgbr_8 polaire rectangle]
   return $result
} -cleanup $CLEANUP2 -result "5"
