#-----------------------------------------------------------------------------
#--   chaque test a pour entree une seule images RGB
#--   l'option jpegfile est testee systematiquement
#--   le test porte sur :
#        concordance des intensites RGB du point {111 108}
#        *avec celles de l'image de reference obtenue par la voie classique (CONV)
#        *avec celles calcules pour RADIAL
#        l'existence de trois fichiers jpeg
#-----------------------------------------------------------------------------

set visuNo 1
set bufNo [::confVisu::getBufNo $visuNo]
set w ".audace.prtr.usr"
set ::conf(extension,defaut) .fit
set ::conf(fichier,compres) 0

variable SETUP {
   ::blt::vector create attendu mesure -watchunset 1
   file copy -force [file join $::conf(testaudela,rep_images) rgbr_8.fit]  $::audace(rep_images)
   set coords {111 108}
}

variable CLEANUP {
   #--   clic sur le bouton Fermer
   ::testaudela::clicButton $w.cmd.fermer
   #---  efface l'image
   ::confVisu::deleteImage $visuNo
   set liste [list rgbr_8 $image_ref $name_out]
   ttscript2 "IMA/SERIES . \"$liste\" * * .fit . . . . DELETE"
   file delete "./${name_out}r.jpg" "./${name_out}g.jpg" "./${name_out}b.jpg"
   ::blt::vector destroy attendu mesure
}

#--   tests a batir pour RGRADIENT

#-------------------------------------------------------------------------------------
#--   test IMA/SERIES CONV kernel_type=gauss
test imaseries_gauss {application d'un filtre gaussien à rgbr_8.fit} -constraints {AUDACE} -setup $SETUP -body {
   set image_ref "gauss_rgbr_8"
   file copy -force [file join $::conf(testaudela,rep_images) $image_ref.fit]  $::audace(rep_images)
   loadima [file join $::audace(rep_images) $image_ref.fit]
   #--   prend la valeur du pixel {111 108}
   attendu set [lrange [buf$bufNo getpix $coords] 1 end]
   loadima [file join $::audace(rep_images) rgbr_8.fit]

   #--   clic sur le menu "Traitement/Améliorer/Filtre gaussien..."
   ::testaudela::clicMenu $visuNo "$::caption(audace,menu,amel)" "$::caption(audace,menu,filtre_gaussien)..."
   #--   selectionne l'option "Options"
   ::testaudela::clicCheckButton $w.ttoptions.che "1"
   #--   selectionne l'option "jpegfile"
   ::testaudela::clicCheckButton $w.ttoptions.jpegfile "1"
   #-- saisit le nom de sortie
   set name_out "gaussien"
   ::testaudela::putLabelEntry $w.sortie.out "$name_out"
   #--   clic sur le bouton Appliquer
   ::testaudela::clicButton $w.cmd.appliquer

   #--   procedure de controle
   mesure set [lrange [buf$bufNo getpix {111 108}] 1 end]
   attendu expr {round(attendu-mesure)}
   #--   nb de differences <+-1
   attendu expr {abs(attendu) <= 1}
   set result [llength [attendu search 1]]
   foreach file [list ${name_out}r.jpg ${name_out}g.jpg ${name_out}b.jpg] {
      if {[file exists $file]} {incr result}
   }
   return $result
} -cleanup $CLEANUP -result "6"

#--   test  IMA/SERIES CONV kernel_type=morlet
test imaseries_morlet {application d'un filtre de Morlet à rgbr_8.fit} -constraints {AUDACE} -setup $SETUP -body {
   set image_ref "morlet_rgbr_8"
   file copy -force [file join $::conf(testaudela,rep_images) $image_ref.fit]  $::audace(rep_images)
   loadima [file join $::audace(rep_images) $image_ref.fit]
   #--   prend la valeur du pixel {111 108}
   attendu set [lrange [buf$bufNo getpix $coords] 1 end]
   loadima [file join $::audace(rep_images) rgbr_8.fit]

   #--   clic sur le menu "Traitement/Améliorer/Ondelette de type Morlet..."
   ::testaudela::clicMenu $visuNo "$::caption(audace,menu,amel)" "$::caption(audace,menu,ond_morlet)..."
   #--   selectionne l'option "Options"
   ::testaudela::clicCheckButton $w.ttoptions.che "1"
   #--   selectionne l'option "jpegfile"
   ::testaudela::clicCheckButton $w.ttoptions.jpegfile "1"
   #-- saisit le nom de sortie
   set name_out "morlet"
   ::testaudela::putLabelEntry $w.sortie.out "$name_out"
   #--   clic sur le bouton Appliquer
   ::testaudela::clicButton $w.cmd.appliquer

   #--   procedure de controle
   mesure set [lrange [buf$bufNo getpix {111 108}] 1 end]
   attendu expr {round(attendu-mesure)}
   #--   nb de differences <+-1
   attendu expr {abs(attendu) <= 1}
   set result [llength [attendu search 1]]
   #---  efface l'image
   ::confVisu::deleteImage $visuNo
   foreach file [list ${name_out}r.jpg ${name_out}g.jpg ${name_out}b.jpg] {
      if {[file exists $file]} {incr result}
   }
   return $result
} -cleanup $CLEANUP -result "6"

#--   IMA/SERIES CONV kernel_type=mexican
test imaseries_mexican {application d'un filtre de chapeau mexicain à rgbr_8.fit} -constraints {AUDACE} -setup $SETUP -body {
   set image_ref "mexican_rgbr_8"
   file copy -force [file join $::conf(testaudela,rep_images) $image_ref.fit]  $::audace(rep_images)
   loadima [file join $::audace(rep_images) $image_ref.fit]
   #--   prend la valeur du pixel {111 108}
   attendu set [lrange [buf$bufNo getpix $coords] 1 end]
   loadima [file join $::audace(rep_images) rgbr_8.fit]

   #--   clic sur le menu "Traitement/Améliorer/Ondelette de type chapeau mexicain..."
   ::testaudela::clicMenu $visuNo "$::caption(audace,menu,amel)" "$::caption(audace,menu,ond_mexicain)..."
   #--   selectionne l'option "Options"
   ::testaudela::clicCheckButton $w.ttoptions.che "1"
   #--   selectionne l'option "jpegfile"
   ::testaudela::clicCheckButton $w.ttoptions.jpegfile "1"
   #-- saisit le nom de sortie
   set name_out "mexican"
   ::testaudela::putLabelEntry $w.sortie.out "$name_out"
   #--   clic sur le bouton Appliquer
   ::testaudela::clicButton $w.cmd.appliquer

   #--   procedure de controle
   mesure set [lrange [buf$bufNo getpix {111 108}] 1 end]
   attendu expr {round(attendu-mesure)}
   #--   nb de differences <+-1
   attendu expr {abs(attendu) <= 1}
   set result [llength [attendu search 1]]
   #---  efface l'image
   ::confVisu::deleteImage $visuNo
   foreach file [list ${name_out}r.jpg ${name_out}g.jpg ${name_out}b.jpg] {
      if {[file exists $file]} {incr result}
   }
   return $result
} -cleanup $CLEANUP -result "6"

#--   test IMA/SERIES RADIAL
test imaseries_radial {appliquer un filtre radial a rbgr_8} -constraints {AUDACE} -setup $SETUP -body {
   #--   preliminaires
   ::blt::vector create attendu mesure -watchunset 1
   loadima [file join $::audace(rep_images) rgbr_8.fit]
   #--   prend la valeur du pixel {111 108}
   attendu set [lrange [buf$bufNo getpix {111 108}] 1 end]

   #--   clic sur le menu "Traitement/Améliorer/Filtre radial..."
   ::testaudela::clicMenu $visuNo "$::caption(audace,menu,amel)" "$::caption(audace,menu,radial)..."
   #--   sigma et power par defaut
   #--   crpix1 et crpix2 automatique
   ::testaudela::putLabelEntry $w.funoptions.radius 52
   #--   selectionne l'option "Options"
   ::testaudela::clicCheckButton $w.ttoptions.che "1"
   #--   selectionne l'option "jpegfile"
   ::testaudela::clicCheckButton $w.ttoptions.jpegfile "1"
  #-- saisit le nom de sortie
   set name_out "radial"
   ::testaudela::putLabelEntry $w.sortie.out "$name_out"
   #--   clic sur le bouton Appliquer
   ::testaudela::clicButton $w.cmd.appliquer

   #--   procedure de controle
   mesure set [lrange [buf$bufNo getpix {111 108}] 1 end]
   #--   clic sur le bouton Fermer
   ::testaudela::clicButton $w.cmd.fermer
   set c [expr {$::prtr::radius*1./$::prtr::sigma}]
   set  coef [expr {1.-1./(1.+pow($c,$::prtr::power))}]
   attendu expr {round(attendu*$coef)}
   attendu expr {mesure/attendu}
   #--    on triche car le code C calcule en polaire d'ou des ecarts des qlq points
   attendu expr {attendu > 0.985 && attendu < 1.015}
   #--  nombre de resultats compris dans l'intervalle
   set result [llength [attendu search 1]]
   #---  efface l'image
   ::confVisu::deleteImage $visuNo
   foreach file [list ${name_out}r.jpg ${name_out}g.jpg ${name_out}b.jpg] {
      if {[file exists $file]} {incr result}
   }
   set liste [list rgbr_8 $name_out]
   ttscript2 "IMA/SERIES . \"$liste\" * * .fit . . . . DELETE"
   file delete "./${name_out}r.jpg" "./${name_out}g.jpg" "./${name_out}b.jpg"
   ::blt::vector destroy attendu mesure
   return $result
} -cleanup {} -result "6"

