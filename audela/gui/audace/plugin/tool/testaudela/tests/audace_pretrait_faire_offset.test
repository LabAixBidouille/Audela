
set visuNo 1
set bufNo [::confVisu::getBufNo $visuNo]

#-------------------------------------------------------------------------------
test audace_pretrait_init {copie les images dans rep_images} {AUDACE} {
   file copy [file join $::conf(testaudela,rep_images) dark-1.fit] $::audace(rep_images)
   file copy [file join $::conf(testaudela,rep_images) dark-2.fit] $::audace(rep_images)
   file copy [file join $::conf(testaudela,rep_images) dark-3.fit] $::audace(rep_images)
   file copy [file join $::conf(testaudela,rep_images) flat-1.fit] $::audace(rep_images)
   file copy [file join $::conf(testaudela,rep_images) flat-2.fit] $::audace(rep_images)
   file copy [file join $::conf(testaudela,rep_images) flat-3.fit] $::audace(rep_images)
   file copy [file join $::conf(testaudela,rep_images) ugc192-1.fit] $::audace(rep_images)
   file copy [file join $::conf(testaudela,rep_images) ugc192-2.fit] $::audace(rep_images)
   file copy [file join $::conf(testaudela,rep_images) ugc192-3.fit] $::audace(rep_images)
} ""

#-------------------------------------------------------------------------------
test audace_pretrait_faire_offset {faire un offset} {AUDACE} {
   #--- clic sur le menu faire un offset
   ::testaudela::clicMenu $visuNo "$::caption(audace,menu,preprocess)" "$::caption(audace,menu,faire_offset)..."
   #--- nom generique (j'utilise les darks car l'offset n'est pas fourni pour gagner de la place)
   ::testaudela::putEntry .audace.faireImageRef.usr.2.1.ent1 "dark-"
   #--- nombre d'images
   ::testaudela::putEntry .audace.faireImageRef.usr.2.2.ent2 "3"
   #--- premier indice
   ::testaudela::putEntry .audace.faireImageRef.usr.2.3.ent3 "1"
   #--- affiche image a la fin du traitement
   ::testaudela::clicCheckButton .audace.faireImageRef.usr.6.1.che1 "1"

   #--- clic sur le bouton OK
   ::testaudela::clicButton .audace.faireImageRef.cmd.ok

   #--- je verifie la valeur du pixel (10,20)
   set pix [lindex [buf$bufNo getpix [list 10 20 ]] 1]
   set valeurAttendue "4429.000000"

   #--- je fabrique un faux offset pour les tests suivants
   buf$bufNo mult 0
   buf$bufNo offset 4000
   saveima offset

   #--- je verifie l'intensite du pixel
   if { $pix == $valeurAttendue } {
      set result ""
   } else {
     set result "valeur pix=$pix différente de celle attendue =$valeurAttendue"
   }

   #--- je raffraichis l'affichage et j'attends 2 secondes, le temps de voir le resultat
   update
   after 2000

   return $result
} ""

#-------------------------------------------------------------------------------
test audace_pretrait_faire_dark {faire un dark avec et sans offset} {AUDACE} {
   #--- clic sur le menu faire un dark
   ::testaudela::clicMenu $visuNo "$::caption(audace,menu,preprocess)" "$::caption(audace,menu,faire_dark)..."
   #--- nom generique
   ::testaudela::putEntry .audace.faireImageRef.usr.2.1.ent1 "dark-"
   #--- nombre d'images
   ::testaudela::putEntry .audace.faireImageRef.usr.2.2.ent2 "3"
   #--- premier indice
   ::testaudela::putEntry .audace.faireImageRef.usr.2.3.ent3 "1"
   #--- image de sortie
   ::testaudela::putEntry .audace.faireImageRef.usr.2.4.ent4 "dark"
   #--- sans offset
   ::testaudela::clicCheckButton .audace.faireImageRef.usr.3.1.che1 "1"
   #--- methode
   ::testaudela::clicRadioButton  .audace.faireImageRef.usr.5.1.rad2
   #--- affiche image a la fin du traitement
   ::testaudela::clicCheckButton .audace.faireImageRef.usr.6.1.che1 "1"

   #--- clic sur le bouton Appliquer
   ::testaudela::clicButton .audace.faireImageRef.cmd.appliquer

   #--- je verifie la valeur du pixel (10,20)
   set pix [lindex [buf$bufNo getpix [list 10 20 ]] 1]
   set valeurAttendue "4429.000000"
   if { $pix == $valeurAttendue } {
      set result1 ""
   } else {
     set result1 "Test sans offset, pix=$pix différente de celle attendue =$valeurAttendue "
   }
   update
   after 2000

   #--- dark moins offset = thermique
   #--- image de offset
   ::testaudela::clicCheckButton .audace.faireImageRef.usr.3.1.che1 "0"
   ::testaudela::putEntry .audace.faireImageRef.usr.3.1.ent6 "offset"
   #--- image de sortie
   ::testaudela::putEntry .audace.faireImageRef.usr.2.4.ent4 "thermique"
   #--- clic sur le bouton OK
   ::testaudela::clicButton .audace.faireImageRef.cmd.ok

   #--- je verifie la valeur du pixel (10,20)
   set pix [lindex [buf$bufNo getpix [list 10 20 ]] 1]
   set valeurAttendue "429.000000"
   if { $pix == $valeurAttendue } {
      set result2 ""
   } else {
     set result2 "Etape avec offset valeur pix=$pix différente de celle attendue =$valeurAttendue "
   }

   #--- je raffraichis l'affichage et j'attends 2 secondes, le temps de voir le resultat
   update
   after 2000

   return "$result1$result2"
} ""

#-------------------------------------------------------------------------------
test audace_pretrait_faire_flat {faire un flat} {AUDACE} {
   #--- clic sur le menu faire un flat
   ::testaudela::clicMenu $visuNo "$::caption(audace,menu,preprocess)" "$::caption(audace,menu,faire_flat_field)..."
   #--- nom generique
   ::testaudela::putEntry .audace.faireImageRef.usr.2.1.ent1 "flat-"
   #--- nombre d'images
   ::testaudela::putEntry .audace.faireImageRef.usr.2.2.ent2 "3"
   #--- premier indice
   ::testaudela::putEntry .audace.faireImageRef.usr.2.3.ent3 "1"
   #--- image de sortie
   ::testaudela::putEntry .audace.faireImageRef.usr.2.4.ent4 "flat"
   #--- sans offset
   ::testaudela::clicCheckButton .audace.faireImageRef.usr.4.1.che1 "1"
   #--- sans dark
   ::testaudela::clicCheckButton .audace.faireImageRef.usr.4.2.che1 "1"
   #--- valeur de normalisation
   ::testaudela::putEntry .audace.faireImageRef.usr.4.3.ent7 "400"
   #--- affiche image a la fin du traitement
   ::testaudela::clicCheckButton .audace.faireImageRef.usr.6.1.che1 "1"
   update

   #--- clic sur le bouton Appliquer
   ::testaudela::clicButton .audace.faireImageRef.cmd.appliquer

   #--- je verifie la valeur du pixel (10,20)
   set pix [lindex [buf$bufNo getpix [list 10 20 ]] 1]
   set valeurAttendue "4922.000000"
   if { $pix == $valeurAttendue } {
      set result1 ""
   } else {
     set result1 "Test sans offset, sans dark-flat, pix=$pix différente de celle attendue =$valeurAttendue "
   }
   #--- rafraichissement pour l'utilisateur
   update

   #--- avec offset
   ::testaudela::clicCheckButton .audace.faireImageRef.usr.4.1.che1 "0"
   ::testaudela::putEntry .audace.faireImageRef.usr.4.1.ent6 "offset"
   #--- valeur de normalisation
   ::testaudela::putEntry .audace.faireImageRef.usr.4.3.ent7 "400"
   update
   #--- clic sur le bouton appliquer
   ::testaudela::clicButton .audace.faireImageRef.cmd.appliquer

   #--- je verifie la valeur du pixel (10,20)
   set pix [lindex [buf$bufNo getpix [list 10 20 ]] 1]
   set valeurAttendue "369.000000"
   if { $pix == $valeurAttendue } {
      set result2 ""
   } else {
     set result2 "Etape avec offset, sans dark-flat valeur pix=$pix différente de celle attendue =$valeurAttendue "
   }

   #--- rafraichissement pour l'utilisateur
   update

   #--- avec dark-flat (c'est le meme dark que l'image)
   #--- avec offset
   ::testaudela::clicCheckButton .audace.faireImageRef.usr.4.1.che1 "0"
   ::testaudela::putEntry .audace.faireImageRef.usr.4.1.ent6 "offset"
   #--- avec dark==thermique
   ::testaudela::clicCheckButton .audace.faireImageRef.usr.4.2.che1 "0"
   ::testaudela::putEntry .audace.faireImageRef.usr.4.2.ent6 "thermique"
   #--- clic sur le bouton ok
   ::testaudela::clicButton .audace.faireImageRef.cmd.ok

   #--- je verifie la valeur du pixel (10,20)
   set pix [lindex [buf$bufNo getpix [list 10 20 ]] 1]
   set valeurAttendue "371.000000"
   if { $pix == $valeurAttendue } {
      set result3 ""
   } else {
     set result3 "Etape avec offset, avec dark-flat valeur pix=$pix différente de celle attendue =$valeurAttendue "
   }

   #--- rafraichissement pour l'utilisateur
   update
   #after 2000

   return "$result1$result2$result3"
} ""

#-------------------------------------------------------------------------------
test audace_pretrait_pretraitement {pretraitement} {AUDACE} {
   set result ""

   #--- clic sur le menu faire un offset
   ::testaudela::clicMenu $visuNo "$::caption(audace,menu,preprocess)" "$::caption(audace,menu,preprocess)..."
   #--- nom generique (j'utilise les darks car l'offset n'est pas fourni pour gagner de la place)
   ::testaudela::putEntry .audace.faireImageRef.usr.2.1.ent1 "ugc192-"
   #--- nombre d'images
   ::testaudela::putEntry .audace.faireImageRef.usr.2.2.ent2 "3"
   #--- premier indice
   ::testaudela::putEntry .audace.faireImageRef.usr.2.3.ent3 "1"
   #--- image de sortie
   ::testaudela::putEntry .audace.faireImageRef.usr.2.4.ent4 "ugc192"
   #--- avec offset
   ::testaudela::putEntry .audace.faireImageRef.usr.7.1.ent6 "offset"
   ::testaudela::clicCheckButton .audace.faireImageRef.usr.7.1.che1 "0"
   #--- sans dark
   ::testaudela::clicCheckButton .audace.faireImageRef.usr.7.2.che1 "1"
   #--- sans optimisation
   ::testaudela::clicCheckButton .audace.faireImageRef.usr.7.3.opt "0"
   #--- sans flat
   ::testaudela::clicCheckButton .audace.faireImageRef.usr.7.4.che1 "1"
   #--- sans contante multiplicative
   ::testaudela::clicCheckButton .audace.faireImageRef.usr.7.3.opt "0"
   #--- constante multiplicative de normalisation
   ::testaudela::putEntry .audace.faireImageRef.usr.7.6.ent6 "1"

   #--- clic sur le bouton appliquer
   ::testaudela::clicButton .audace.faireImageRef.cmd.appliquer
   ##   (4795 + 4775 + 4805 ) /3 - 4000 = 791
   #--- je verifie la valeur du pixel (10,20)
   set pix [lindex [buf$bufNo getpix [list 10 20 ]] 1]
   set valeurAttendue "805.000000"
   if { $pix != $valeurAttendue } {
     append result "Etape avec offset valeur pix=$pix différente de celle attendue =$valeurAttendue \n"
   }
   #--- rafraichissement pour l'utilisateur
   update

   #--------------------------------------------------------------------
   #--- avec dark sans optimisation
   #--- avec offset
   ::testaudela::putEntry .audace.faireImageRef.usr.7.1.ent6 "offset"
   ::testaudela::clicCheckButton .audace.faireImageRef.usr.7.1.che1 "0"
   #--- image dark=thermique
   ::testaudela::clicCheckButton .audace.faireImageRef.usr.7.2.che1 "0"
   ::testaudela::putEntry .audace.faireImageRef.usr.7.2.ent6 "thermique"
   #--- sans optimisation
   ::testaudela::clicCheckButton .audace.faireImageRef.usr.7.3.opt "0"
   #--- constante multiplicative de normalisation
   ::testaudela::putEntry .audace.faireImageRef.usr.7.6.ent6 "1"
   #--- clic sur le bouton appliquer
   ::testaudela::clicButton .audace.faireImageRef.cmd.appliquer

   #--- je verifie la valeur du pixel (10,20)
   set pix [lindex [buf$bufNo getpix [list 10 20 ]] 1]
   set valeurAttendue "376.000000"
   if { $pix != $valeurAttendue } {
     append result "Etape avec dark sans opt, valeur pix=$pix différente de celle attendue =$valeurAttendue\n"
   }

   #--------------------------------------------------------------------
   #--- avec dark avec optimisation
   #--- avec offset
   ::testaudela::putEntry .audace.faireImageRef.usr.7.1.ent6 "offset"
   ::testaudela::clicCheckButton .audace.faireImageRef.usr.7.1.che1 "0"
   #--- image dark
   ::testaudela::clicCheckButton .audace.faireImageRef.usr.7.2.che1 "0"
   ::testaudela::putEntry .audace.faireImageRef.usr.7.2.ent6 "thermique"
   #--- avec optimisation
   ::testaudela::clicCheckButton .audace.faireImageRef.usr.7.3.opt "1"
   #--- clic sur le bouton appliquer
   ::testaudela::clicButton .audace.faireImageRef.cmd.appliquer

   #--- je verifie la valeur du pixel (10,20)
   set pix [lindex [buf$bufNo getpix [list 10 20 ]] 1]
   set valeurAttendue "803.000000"
   if { $pix != $valeurAttendue } {
     append result "Etape avec dark avec optimisation, valeur pix=$pix différente de celle attendue =$valeurAttendue \n"
   }

   #--------------------------------------------------------------------
   #--- avec flat et constante auto
   #--- avec offset
   ::testaudela::putEntry .audace.faireImageRef.usr.7.1.ent6 "offset"
   ::testaudela::clicCheckButton .audace.faireImageRef.usr.7.1.che1 "0"
   #--- image dark
   ::testaudela::clicCheckButton .audace.faireImageRef.usr.7.2.che1 "0"
   ::testaudela::putEntry .audace.faireImageRef.usr.7.2.ent6 "thermique"
   #--- image flat
   ::testaudela::clicCheckButton .audace.faireImageRef.usr.7.4.che1 "0"
   ::testaudela::putEntry .audace.faireImageRef.usr.7.4.ent6 "flat"
   #--- constante auto
   ::testaudela::clicCheckButton .audace.faireImageRef.usr.7.6.che1 "1"
   #--- clic sur le bouton appliquer
   ::testaudela::clicButton .audace.faireImageRef.cmd.appliquer

   #--- je verifie la valeur du pixel (10,20)
   set pix [lindex [buf$bufNo getpix [list 10 20 ]] 1]
   set valeurAttendue "835.000000"
   if { $pix != $valeurAttendue } {
     append result "Etape avec flat cte auto, valeur pix=$pix différente de celle attendue =$valeurAttendue \n"
   }

   #--------------------------------------------------------------------
   #--- avec flat et constante manuelle
   ::testaudela::clicCheckButton .audace.faireImageRef.usr.7.6.che1 "0"
   #--- constante
   ::testaudela::putEntry .audace.faireImageRef.usr.7.6.ent6  "400"
   #--- clic sur le bouton appliquer
   ::testaudela::clicButton .audace.faireImageRef.cmd.appliquer

   #--- clic sur le bouton fermer
   ::testaudela::clicButton .audace.faireImageRef.cmd.fermer

   #--- je verifie la valeur du pixel (10,20)
   set pix [lindex [buf$bufNo getpix [list 10 20 ]] 1]
   set valeurAttendue "866.000000"
   if { $pix != $valeurAttendue } {
     append result "Etape avec flat et cte manuelle, valeur pix=$pix différente de celle attendue =$valeurAttendue \n"
   }

   #--- rafraichissement pour l'utilisateur
   update
   #after 2000

   return "$result"
} ""

#-------------------------------------------------------------------------------
test audace_pretrait_fin {effacer la visu} {AUDACE} {
   #--- je supprime les fichiers du test
   file delete -force [file join $::audace(rep_images) dark-1.fit]
   file delete -force [file join $::audace(rep_images) dark-2.fit]
   file delete -force [file join $::audace(rep_images) dark-3.fit]
   file delete -force [file join $::audace(rep_images) flat-1.fit]
   file delete -force [file join $::audace(rep_images) flat-2.fit]
   file delete -force [file join $::audace(rep_images) flat-3.fit]
   file delete -force [file join $::audace(rep_images) ugc192-1.fit]
   file delete -force [file join $::audace(rep_images) ugc192-2.fit]
   file delete -force [file join $::audace(rep_images) ugc192-3.fit]

   file delete -force [file join $::audace(rep_images) offset.fit]
   file delete -force [file join $::audace(rep_images) dark.fit]
   file delete -force [file join $::audace(rep_images) thermique.fit]
   file delete -force [file join $::audace(rep_images) flat.fit]
   file delete -force [file join $::audace(rep_images) ugc192.fit]
   file delete -force [file join $::audace(rep_images) ugc1921.fit]
   file delete -force [file join $::audace(rep_images) ugc1922.fit]
   file delete -force [file join $::audace(rep_images) ugc1923.fit]
   #--- je vide la visu
   visu$visuNo clear
} "0"

